scoreGen("IRRLL","VRRIV")
scoreGen("IRRLLR","VRRIVH")
scoreGen("IRRLLRG","VRRIVHL")
scoreGen("LIRR","GVRR")
setwd("stat540-2014-hindalong-emily/sem06")
list.files()
open(sem06.Rmd)
open("sem06.Rmd")
pDat <- prepareData(c("1451617_at","1425222_x_at","1422929_s_at"))
wtpDat <- subset(pDat,gType=="wt")
makeStripplot(wtpDat,group=NULL)
library(lattice)
library(limma)
prepareData <- function(x) {
pDatDes <- cbind(t(prDat[x,]),prDes)
pDat <- with(pDatDes,data.frame(sidChar, sidNum,
devStage = factor(devStage,levels=as.character(unique(devStage))),
gType = factor(gType,levels=as.character(unique(gType))),
gExp = c(unlist(pDatDes[,grepl(".*at",colnames(pDatDes))])),
gene = factor(rep(grep(".*at",colnames(pDatDes),value=TRUE), each = nrow(pDatDes))),stringsAsFactors=FALSE))
row.names(pDat) <- seq(1:nrow(pDat))
pDat
}
makeStripplot <- function(data, group = data$gType, type = c('p','a')) {
stripplot(gExp ~ devStage | gene, data,
group = group, jitter.data = TRUE,
auto.key = TRUE, type = type, grid = TRUE)
}
prDes <- read.table("../GSE4051_design.tsv", header = TRUE, as.is = TRUE)
prDat <- read.table("../GSE4051_data.tsv")
wtDes <- subset(prDes,gType=="wt")
wtDat <- subset(prDat,select=prDes$gType=="wt")
wtDesMat <- model.matrix(~devStage,wtDes)
wtFit <- lmFit(wtDat,wtDesMat)
wtEbFit <- eBayes(wtFit)
topTable(wtEbFit)
dsHits <- topTable(wtEbFit, coef = grep("devStage", colnames(coef(wtEbFit))))
pDat <- prepareData(c("1451617_at","1425222_x_at","1422929_s_at"))
wtpDat <- subset(pDat,gType=="wt")
makeStripplot(wtpDat,group=NULL)
wtFitlm <- lm(gExp ~ devStage, wtpDat)
makeStripplot(wtpDat,group=NULL)
wtFitlm <- lm(gExp ~ devStage, wtpDat)
wtFitlm
wtpDat
wtFitlm <- lm(gExp ~ devStage, wtpDat[1:35])
wtFitlm <- lm(gExp ~ devStage, wtpDat[1:35,])
dsHits
wtpDat
wtFitlm
topTable(wtEbFit)
dsHits
wtFitlm
dsHits
summary(wtFitlm)
dsHits <- topTable(wtEbFit, coef = grep("devStage", colnames(coef(wtEbFit))))
wtFitlm <- lm(gExp ~ devStage, wtpDat[1:35,],coef = grep("devStage", colnames(coef(wtEbFit))))
wtFitlm <- lm(gExp ~ devStage, wtpDat[1:35,])
summary(wtFitlm)
dsHits
summary(wtFitlm)$coef
dsHits["1451617_at",]
summary(wtFitlm)$fstatistic
summary(wtFitlm)$coef
dsHits["1451617_at",]
BHtab <- topTable(wtEbFit,coef = grep("devStage", colnames(coef(wtEbFit))),number=nrow(wtEbFit$genes),adjust.method="BH",p.value = 1e-05)
wtEbFit
wtEbFit$genes
BHtab <- topTable(wtEbFit,coef = grep("devStage", colnames(coef(wtEbFit))),number=nrow(wtEbFit),adjust.method="BH",p.value = 1e-05)
nrow(BHtab)
BHtab[63,c("ID","F","adj.P.Val","devStageP6")]
BHtab[63,c("F","adj.P.Val","devStageP6")]
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=nrow(wtEbFit$genes))
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=nrow(wtEbFit))
P10tab <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=nrow(wtEbFit))
xyplot(P2tab$t ~ P10tab$t,panel=panel.smoothScatter)
P2tab
head(P2tab)
head(P10tab)
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter)
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=nrow(wtEbFit),sort.by=none)
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=nrow(wtEbFit),sort.by="none")
P10tab <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=nrow(wtEbFit),sort.by="none")
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter)
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter,type = c("p","r"))
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter,type = c("p","r"))
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter,type = c("p","r"))
xyplot(P10tab$t ~ P2tab$t,panel=panel.smoothScatter,type = c("r"))
xyplot(P10tab$t ~ P2tab$t,type = c("r"),panel=panel.smoothScatter)
niceScatter <- function(x.var, y.var, x.label, y.label) {
lims <- c(-20, 15)
xyplot(y.var ~ x.var, asp = 1, panel = function(x, y, ...) {
panel.smoothScatter(x, y, ...)
panel.abline(0, 1, col = "orange")
}, nbin = 150, ylim = lims, xlim = lims, xlab = x.label, ylab = y.label)
}
niceScatter(P2tab$t,P10tab$t,"P2 t-stat","P10 t-stat")
P2tab
head(P2tab)
head(P10tab)
niceScatter(P10tab$t,P2tab$t,"P2 t-stat","P10 t-stat")
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
P10tab <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
niceScatter(P2tab$t,P10tab$t,"P2 t-stat","P10 t-stat")
density(P2tab$adj.P.Val, P10tab$adj.P.Val)
density(P2tab$adj.P.Val + P10tab$adj.P.Val)
densityplot(P2tab$adj.P.Val + P10tab$adj.P.Val)
densityplot(~ P2tab$adj.P.Val + P10tab$adj.P.Val)
str(wtDesMat)
topTable(wtEbFit)
T2tab
P2tab
head9P2tab
head(P2tab)
topTable(wtEbFit)
grep("devStageP2", colnames(coef(wtEbFit)))
P2tab <- topTable(wtEbFit,coef = "devStageP2",number=Inf,sort.by="none")
head(P2tab)
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
P10tab <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
niceScatter(P2tab$t,P10tab$t,"P2 t-stat","P10 t-stat")
densityplot(~ P2tab$adj.P.Val + P10tab$adj.P.Val)
dsHits
topTable(wtEbFit)
str(prDes)
wtDesMat
wtDes
wtDesMat
topTable(wtEbFit)
as.factor(prDes$devStage)
prDes$devStage < as.factor(prDes$devStage)
prDes$devStage <- as.factor(prDes$devStage)
wtDes <- subset(prDes,gType=="wt")
wtDat <- subset(prDat,select=prDes$gType=="wt")
wtDesMat <- model.matrix(~devStage,wtDes)
wtDesMat
wtFit <- lmFit(wtDat,wtDesMat)
wtEbFit <- eBayes(wtFit)
topTable(wtEbFit)
prDes <- read.RDS("../GSE4051_design.rds")
prDes <- readRDS("../GSE4051_design.rds")
prDes <- readRDS("../GSE4051_design.rds")
str(prDes)
wtDes <- subset(prDes,gType=="wt")
wtDat <- subset(prDat,select=prDes$gType=="wt")
wtDesMat <- model.matrix(~devStage,wtDes)
wtFit <- lmFit(wtDat,wtDesMat)
wtEbFit <- eBayes(wtFit)
str(wtEbFit)
summary(wtEbFit)
topTable(wtEbFit)
dsHits <- topTable(wtEbFit, coef = grep("devStage", colnames(coef(wtEbFit))))
P2tab <- topTable(wtEbFit,coef = grep("devStageP2", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
P10tab <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=Inf,sort.by="none")
niceScatter(P2tab$t,P10tab$t,"P2 t-stat","P10 t-stat")
summary(wtFitlm)$coef
dsHits["1451617_at",]
dsHits["1451617_at",]
densityplot(~ P2tab$adj.P.Val + P10tab$adj.P.Val)
densityplot(~ P2tab$adj.P.Val + P10tab$adj.P.Val,auto.key=TRUE)
addmargins(table(P2tab$adj.P.Val < 1e-03, P10tab$adj.P.Val < 1e-03, dnn = c("P2",
"P10")))
BHtab <- topTable(wtEbFit,coef = grep("devStage", colnames(coef(wtEbFit))),number=Inf,adj.P.Val = 1e-05)
BYtab <- topTable(wtEbFit,coef = grep("devStage", colnames(coef(wtEbFit))),number=Inf,adjust.method="BY")
head9BYtab
head(BYtab)
BYtab <- topTable(wtEbFit,coef = grep("devStage", colnames(coef(wtEbFit))),number=Inf,adjust.method="BY",sort="none")
head(BYtab)
BYtab_P10 <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=Inf,adjust.method="BY",sort="none")
P10tab_BY <- topTable(wtEbFit,coef = grep("devStageP10", colnames(coef(wtEbFit))),number=Inf,adjust.method="BY",sort="none")
splom(P10tab$adj.P.Val + P10tab-BY$adj.P.Val)
splom(P10tab$adj.P.Val + P10tab_BY$adj.P.Val)
P10tab$adj.P.Val
str(P10tab$adj.P.Val)
str(P10tab_BY$adj.P.Val)
P10tab_BY$adj.P.Val
splom(c(P10tab$adj.P.Val, P10tab_BY$adj.P.Val))
temp <- rbind(P10tab$adj.P.Val, P10tab_BY$adj.P.Val)
splom(t(temp))
P10tab
head(P10tab)
splomDat <- data.frame(raw=P10tab$P.Value,BH=P10tab$adj.P.Val,BY=P10tab_BY$adj.P.Val)
splom(t(splomDat))
splom(splomDat)
cont.matrix <- makeContrasts(P10VsP6 = devStageP10 - devStageP6, fourweeksVsP10 = devStage4_weeks - devStageP10, levels = wtDesMat))
cont.matrix <- makeContrasts(P10VsP6 = devStageP10 - devStageP6, fourweeksVsP10 = devStage4_weeks - devStageP10, levels = wtDesMat))
cont.matrix <- makeContrasts(P10VsP6 = devStageP10 - devStageP6, fourweeksVsP10 = devStage4_weeks - devStageP10, levels = wtDesMat)
wtFitCont <- contrasts.fit(wtFit, cont.matrix)
wtEbFitCont <- eBayes(wtFitCont)
topTable(wtEbFitCont)
pDat <- prepareData(rownames(wtEbFitCont)[1:4])
wtpDat <- subset(pDat,gType=="wt")
makeStripplot(wtpDat,group=NULL)
pDat <- prepareData(rownames(wtEbFitCont)[1:4])
makeStripplot(wtpDat,group=NULL)
makeStripplot(pDat,group=NULL)
wtEbFitCont
head(wtEbFitCont)
head(wtEbFitCont)
contTab <- topTable(wtEbFitCont)
contTab
pDat <- prepareData(rownames(contTab)[1:4])
makeStripplot(pDat,group=NULL)
pDat <- prepareData(rownames(contTab)[1:4])
wtpDat <- subset(pDat,gType=="wt")
makeStripplot(wtpDat,group=NULL)
cutoff <- 1e-04
wtResCont <- decideTests(wtEbFitCont, p.value = cutoff, method = "global")
summary(wtResCont)
hits1 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] < 0)]
makeStripplot(prepareData(hits1))
makeStripplot(hits1)
makeStripplot(prepareData(hits1))
hits1 <- rownames(wtDat)[which(wtResCont[, "P10VsP6"] < 0)]
makeStripplot(prepareData(hits1))
hits1 <- wtDat[wtResCont[, "P10VsP6"] < 0),]
hits1 <- wtDat[wtResCont[, "P10VsP6"] < 0,]
makeStripplot(hits1)
head(hits1)
wtpDat
hits1 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] < 0)]
pDat <- prepareData(hits1)
wtpDat <- subset(pDat,gType=="wt")
makeStripplot(wtpDat,group=NULL)
hits2 <- rownames(prDat)[which(wtResCont[, "fourweeksVsP10"] < 0)]
hits3 <- rownames(prDat)[which(wtResCont[, "fourweeksVsP10"] > 0)]
pDat_hits2 <- prepareData(hits2[1:4])
wtpDat_hits2 <- subset(pDat_hits2,gType=="wt")
makeStripplot(wtpDat_hits2,group=NULL)
pDat_hits3 <- prepareData(hits3[1:4])
wtpDat_hits3 <- subset(pDat_hits3,gType=="wt")
makeStripplot(wtpDat_hits3,group=NULL)
intersect(hits1,hits2)
intersect(hits1,hits3)
intersect(hits2,hits3)
vennDiagram(wtResCont)
cutoff <- 0.01
nHits <- 8
wtResCont <- decideTests(wtEbFitCont, p.value = cutoff, method = "global")
summary(wtResCont)
VennDiagram(wtResCont)
vennDiagram(wtResCont)
hits1 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] < 0)]
hits2 <- rownames(prDat)[which(wtResCont[, "fourweeksVsP10"] < 0)]
hits3 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] > 0)]
hits4 <- rownames(prDat)[which(wtResCont[, "fourweeksVsP10"] > 0)]
hits5 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] != 0 & wtResCont[, "fourweeksVsP10"] != 0)]
hits6 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] > 0 & wtResCont[, "fourweeksVsP10"] < 0)]
pDat_hits1 <- prepareData(hits1[1:nhits])
wtpDat_hits1 <- subset(pDat_hits1,gType=="wt")
makeStripplot(wtpDat_hits1,group=NULL)
nhits <- 8
pDat_hits1 <- prepareData(hits1[1:nhits])
wtpDat_hits1 <- subset(pDat_hits1,gType=="wt")
makeStripplot(wtpDat_hits1,group=NULL)
pDat_hits2 <- prepareData(hits2[1:nhits])
wtpDat_hits2 <- subset(pDat_hits2,gType=="wt")
makeStripplot(wtpDat_hits2,group=NULL)
pDat_hits3 <- prepareData(hits3[1:nhits])
wtpDat_hits3 <- subset(pDat_hits3,gType=="wt")
makeStripplot(wtpDat_hits3,group=NULL)
pDat_hits4 <- prepareData(hits4[1:nhits])
wtpDat_hits4 <- subset(pDat_hits4,gType=="wt")
makeStripplot(wtpDat_hits4,group=NULL)
pDat_hits5 <- prepareData(hits5[1:nhits])
wtpDat_hits5 <- subset(pDat_hits5,gType=="wt")
makeStripplot(wtpDat_hits5,group=NULL)
i
wtpDat_hits5 <- subset(pDat_hits5,gType=="wt")
makeStripplot(wtpDat_hits5,group=NULL)
pDat_hits6 <- prepareData(hits6[1:nhits])
wtpDat_hits6 <- subset(pDat_hits6,gType=="wt")
makeStripplot(wtpDat_hits3,group=NULL)
pDat_hits5 <- prepareData(hits5)
wtpDat_hits5 <- subset(pDat_hits5,gType=="wt")
makeStripplot(wtpDat_hits5,group=NULL)
pDat_hits6 <- prepareData(hits6)
wtpDat_hits6 <- subset(pDat_hits6,gType=="wt")
makeStripplot(wtpDat_hits3,group=NULL)
hits5 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] != 0 & wtResCont[, "fourweeksVsP10"] != 0)]
hits6 <- rownames(prDat)[which(wtResCont[, "P10VsP6"] > 0 & wtResCont[, "fourweeksVsP10"] < 0)]
pDat_hits6 <- prepareData(hits6)
wtpDat_hits6 <- subset(pDat_hits6,gType=="wt")
makeStripplot(wtpDat_hits6,group=NULL)
row.names = 1)
dat <- read.table("bottomly_count_table.tsv", header = TRUE,
row.names = 1)
setwd(../sem07)
setwd("../sem07")
dat <- read.table("bottomly_count_table.tsv", header = TRUE,
row.names = 1)
des <- read.table("bottomly_phenodata.tsv", header = TRUE,
row.names = 1)
all(rownames(des) == colnames(dat))
table(des$strain)
group <- factor(c(rep("1", 10), rep("2", 11)))
dge.glm <- DGEList(counts = dat, group = group)
library(edgeR)
dge.glm <- DGEList(counts = dat, group = group)
str(dge.glm)
design <- model.matrix(~group)
dge.glm.com.disp <- estimateGLMCommonDisp(dge.glm, design, verbose = TRUE)
dge.glm.trend.disp <- estimateGLMTrendedDisp(dge.glm.com.disp)
dge.glm.tag.disp <- estimateGLMTagwiseDisp(dge.glm.trend.disp, design)
plotBCV(dge.glm.tag.disp)
prDes
cont.matrix <- makeContrasts(P2VsE16 = devStageP2 - devStageE16, P6VsP2 = devStageP6 - devStageP2, P10VsP6 = devStageP10 - devStageP6, fourweeksVsP10 = devStage4_weeks - devStageP10, levels = wtDesMat)
cont.matrix <- makeContrasts(P2VsE16 = devStageP2 - Intercept, P6VsP2 = devStageP6 - devStageP2, P10VsP6 = devStageP10 - devStageP6, fourweeksVsP10 = devStage4_weeks - devStageP10, levels = wtDesMat)
wtFitCont <- contrasts.fit(wtFit, cont.matrix)
wtEbFitCont <- eBayes(wtFitCont)
contTab <- topTable(wtEbFitCont)
contTab
cutoff <- 0.01
wtResCont <- decideTests(wtEbFitCont, p.value = cutoff, method = "global")
summary(wtResCont)
vennDiagram(wtResCont)
hits <- rownames(prDat)[which((wtResCont[, "P2VsE16"] != 0 | wtResCont[, "P6VsP2"] != 0)) & (wtResCont[, "P10VsP6"] == 0 | wtResCont[, "fourweeksVsP10"] == 0)]
hits <- rownames(prDat)[which((wtResCont[, "P2VsE16"] != 0 | wtResCont[, "P6VsP2"] != 0) & (wtResCont[, "P10VsP6"] == 0 | wtResCont[, "fourweeksVsP10"] == 0))]
hits
hits1
hits <- rownames(prDat)[which((wtResCont[, "P2VsE16"] != 0 | wtResCont[, "P6VsP2"] != 0) & (wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0))]
rownames(prDat)[which(wtResCont[, "P2VsE16"] != 0)]
rownames(prDat)[which(wtResCont[, "P2VsE16"] == 0)]
rownames(prDat)[which(wtResCont[, "P2VsE16"] == 0 & wtResCont[, "P6VsP2"] == 0)]
nrow(prDat)
rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]
nrow(rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)])
nrow(rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)])count())
count(nrow(rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)])count()))
count(nrow(rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]))
length(nrow(rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]))
length((rownames(prDat)[which(wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]))
pDat_hits <- prepareData(hits[1:nhits])
wtpDat_hit <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
wtpDat_hits <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
hits <- rownames(prDat)[which((wtResCont[, "P2VsE16"] != 0 & wtResCont[, "P6VsP2"] != 0) & (wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0))]
pDat_hits <- prepareData(hits[1:nhits])
wtpDat_hits <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
hits <- rownames(prDat)[which(wtResCont[, "P2VsE16"] != 0 & wtResCont[, "P6VsP2"] != 0 & wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]
pDat_hits <- prepareData(hits[1:nhits])
wtpDat_hits <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
cutoff <- 1e-04
wtResCont <- decideTests(wtEbFitCont, p.value = cutoff, method = "global")
summary(wtResCont)
vennDiagram(wtResCont)
hits <- rownames(prDat)[which((wtResCont[, "P2VsE16"] != 0 | wtResCont[, "P6VsP2"] != 0) & wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]
pDat_hits <- prepareData(hits[1:nhits])
wtpDat_hits <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
wtDesMat
hits <- rownames(prDat)[which(wtResCont[, "P2VsE16"] != 0 & wtResCont[, "P6VsP2"] != 0 & wtResCont[, "P10VsP6"] == 0 & wtResCont[, "fourweeksVsP10"] == 0)]
pDat_hits <- prepareData(hits[1:nhits])
wtpDat_hits <- subset(pDat_hits,gType=="wt")
makeStripplot(wtpDat_hits,group=NULL)
plotBCV(dge.glm.tag.disp)
fit <- glmFit(dge.glm.tag.disp, design)
colnames(coef(fit))
lrt <- glmLRT(fit, coef = 2)
topTags(lrt)
tt.glm <- topTags(lrt, n = Inf)
class(tt.glm)
nrow(tt.glm$table[tt.glm$table$FDR < 0.01, ])
interestingSamples <- rownames(tt.glm$table[tt.glm$table$FDR < 1e-50, ])
cpm(dge.glm.tag.disp)[interestingSamples, ]
summary(de.glm <- decideTestsDGE(lrt, p = 0.05, adjust = "BH"))
tags.glm <- rownames(dge.glm.tag.disp)[as.logical(de.glm)]
plotSmear(lrt, de.tags = tags.glm)
abline(h = c(-2, 2), col = "blue")
keeps <- apply(dat,1,function(x) {sum(x) > 0})
datFilt <- dat[keeps,]
dge.glm <- DGEList(counts = datFilt, group = group)
str(dge.glm)
dge.glm.com.disp <- estimateGLMCommonDisp(dge.glm, design, verbose = TRUE)
dge.glm.trend.disp <- estimateGLMTrendedDisp(dge.glm.com.disp)
plotBCV(dge.glm.tag.disp)
fit <- glmFit(dge.glm.tag.disp, design)
colnames(coef(fit))
lrt <- glmLRT(fit, coef = 2)
topTags(lrt)
tt.glm <- topTags(lrt, n = Inf)
class(tt.glm)
nrow(tt.glm$table[tt.glm$table$FDR < 0.01, ])
interestingSamples <- rownames(tt.glm$table[tt.glm$table$FDR < 1e-50, ])
cpm(dge.glm.tag.disp)[interestingSamples, ]
summary(de.glm <- decideTestsDGE(lrt, p = 0.05, adjust = "BH"))
tags.glm <- rownames(dge.glm.tag.disp)[as.logical(de.glm)]
plotSmear(lrt, de.tags = tags.glm)
abline(h = c(-2, 2), col = "blue")
keeps2 <- apply(dat,1,function(x) {sum(x) > 0})
datFilt2 <- dat[keeps,]
dge.glm <- DGEList(counts = datFilt2, group = group)
str(dge.glm)
dge.glm.com.disp <- estimateGLMCommonDisp(dge.glm, design, verbose = TRUE)
dge.glm.trend.disp <- estimateGLMTrendedDisp(dge.glm.com.disp)
dge.glm.tag.disp <- estimateGLMTagwiseDisp(dge.glm.trend.disp, design)
plotBCV(dge.glm.tag.disp)
fit <- glmFit(dge.glm.tag.disp, design)
colnames(coef(fit))
lrt <- glmLRT(fit, coef = 2)
topTags(lrt)
tt.glm <- topTags(lrt, n = Inf)
class(tt.glm)
nrow(tt.glm$table[tt.glm$table$FDR < 0.01, ])
interestingSamples <- rownames(tt.glm$table[tt.glm$table$FDR < 1e-50, ])
cpm(dge.glm.tag.disp)[interestingSamples, ]
summary(de.glm <- decideTestsDGE(lrt, p = 0.05, adjust = "BH"))
tags.glm <- rownames(dge.glm.tag.disp)[as.logical(de.glm)]
plotSmear(lrt, de.tags = tags.glm)
abline(h = c(-2, 2), col = "blue")
library(DESeq)
deSeqDat <- newCountDataSet(dat, group)
head(counts(deSeqDat))
deSeqDat <- estimateSizeFactors(deSeqDat)
sizeFactors(deSeqDat)
deSeqDat <- estimateDispersions(deSeqDat)
plotDispEsts(deSeqDat)
results <- nbinomTest(deSeqDat, levels(group)[1], levels(group)[2])
str(results)
plotMA(results)
library(limma)
norm.factor <- calcNormFactors(dat)
dat.voomed <- voom(dat, design, plot = TRUE, lib.size = colSums(dat) * norm.factor)
dat.voomed
fit <- lmFit(dat.voomed, design)
fit <- eBayes(fit)
topTable(fit)
str(fit)
fit
topTags(lrt)
edgeR_res <- topTags(lrt)
edgeR_res
results
head(results)
voomlim <- topTable(fit)
voomlim
edgeR_res <- tt.glm$table[tt.glm$table$FDR < 0.01, ]
DEseq_res <- results[results$padj < 0.01, ]
voomlim_res <- voomlim[voomlim$adj.P.Val < 0.01, ]
NA < 0.01
Deseq_res
head(DEseq_res)
DESeq <- results[!is.na(results$padj)]
DESeq <- results[!is.na(results$padj),]
DEseq_res <- DESeq[DESeq$padj < 0.01, ]
all_genes <- list(EdgeR=edgeR_res,DESeq=DESseq_res,VoomLim=voomlim_res)
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
vennDiagram(edgeR_res,DEseq_res,voomlim_res)
library(VennDiagram)
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
edgeR_res <- rownames(tt.glm$table[tt.glm$table$FDR < 0.01, ])
DEseq_res <- rownames(DESeq[DESeq$padj < 0.01, ])
voomlim_res <- rownames(voomlim[voomlim$adj.P.Val < 0.01, ])
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
des
voomlim <- topTable(fit,coef=2)
voomlim
voomlim <- topTable(fit,nuber=Inf)
voomlim <- topTable(fit,number=Inf)
voomlim_res <- rownames(voomlim[voomlim$adj.P.Val < 0.01, ])
head(voomlim)
tt.glm$table[tt.glm$table$FDR < 1e-10, ]
edgeR_res <- rownames(tt.glm$table[tt.glm$table$FDR < 1e-10, ])
DEseq_res <- rownames(na.omit(results[results$padj < 1e-10, ]))
voomlim_res <- rownames(voomlim[voomlim$adj.P.Val < 1e-10, ])
voomlim <- topTable(fit,number=Inf)
fit <- lmFit(dat.voomed, design)
fit <- eBayes(fit)
topTable(fit)
voomlim <- topTable(fit,coef=2,number=Inf)
voomlim_res <- rownames(voomlim[voomlim$adj.P.Val < 1e-10, ])
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
edgeRres
edgeR_res
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
all_genes
head(results)
DEseq_res <- na.omit(results[results$padj < 1e-10, ])$id
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
all_genes
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
thresh <- 1e-10
edgeR_res <- rownames(tt.glm$table[tt.glm$table$FDR < thresh, ])
DEseq_res <- na.omit(results[results$padj < thresh, ])$id
voomlim_res <- rownames(voomlim[voomlim$adj.P.Val < thresh, ])
all_genes <- list(EdgeR=edgeR_res,DESeq=DEseq_res,VoomLim=voomlim_res)
plot.new()
venn_plot <- venn.diagram(all_genes, filename = NULL, fill = c("red", "blue","green"), force.unique=TRUE,ext.text=FALSE,cat.cex=1.5)
grid.draw(venn_plot)
options(rpubs.upload.method = "internal")
getwd()
list.files()
row.names = 1)
dat <- read.table("bottomly_count_table.tsv", header = TRUE,
row.names = 1)
